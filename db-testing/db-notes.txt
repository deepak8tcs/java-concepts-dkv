SQL is pronounced as "si:kwal". (or Ess-cue-ell )
Initially called SEQUEL (Structured English Query Language).SEQUEL was later renamed to SQL by dropping the vowels

Subquery vs Joins:
same thing can be achieved using both
but join performance is better in subsequent queries as query plan is created for join by DB engine and saved.
next execution is faster.


---
//if qty is null show it as 0
Select Name, IS NULL(Quantity, 0) from tab1; 
===================
-All Aggregate functions (including count) works only on non-Null values.
They ignore NULL values in calculation.

-where is used with column name.
 Eg where price=25

-having is used with aggregate function. 
Eg having sum(price) =100

-Semicolon is not mandatory at the end of sql statement
 but it's a good practice to use it.
 ==========================================

 Distinct clause is applied in one column or one row(multi-column's values)??
 
SELECT DISTINCT expressions FROM tables [WHERE conditions];

expressions:
The columns or calculations that you wish to retrieve.

Note:
1. When only one expression is provided in the DISTINCT clause, the query will return the unique values for that expression.
2. When more than one expression is provided in the DISTINCT clause, the query will retrieve unique combinations for the expressions listed.
3. In SQL, the DISTINCT clause doesn't ignore NULL values.
   So when using the DISTINCT clause in your SQL statement, your result set will include NULL as a distinct value.
   
 SELECT COUNT(DISTINCT Country) FROM Customers;
 ==========================================
 Self Join:
 
 find employee with the same salary from emp table
 
 select distict e1.fname , e1.salary from emp as e1, emp as e2
 where e1.salary = e2.salary
 and 1.empid != e2.empid;
 
 =========
 ***JOINs***
 In case of Inner join, record filtering happens on both tables. In case of left join , filtering happens on right table & vice-versa.
 
 Condition in ON vs WHERE clause: Both used for filtering the records.
 
 For Inner JOIN, they are equivalent/ return same results.
 but for Outer JOIN they are not equivalent.
 
 ON: Filters Before joining the tables
 WHERE: filters after joining the tables (in case of left join , filtering happens on right table & vice-versa)
 

SELECT * FROM Orders LEFT JOIN OrderLines ON OrderLines.OrderID=Orders.ID 
AND Orders.ID = 12345

SELECT * FROM Orders LEFT JOIN OrderLines ON OrderLines.OrderID=Orders.ID
WHERE Orders.ID = 12345

The first will return all orders, but only order 12345 will have any lines associated with it.

   | Oid      |OlinesColumns|
   |----------|----|
   | 12345    | x  |
   | 12345    | y  | 
   | 12346    |NULL| only for oid 12345, lines will be returned, not for any other orderid even if they are present/matched in 2nd table
   | 12347    |NULL| 
 
 The second will return an order and its lines, if any, for order number 12345.  //preffered

   | Oid      |OlinesColumns|
   |----------|----|
   | 12345    | x  |
   | 12345    | y  | 
   
   ---------------------
   An INNER JOIN statement can be rewritten as a CROSS JOIN with a WHERE clause matching the same condition you used in the ON clause of the INNER JOIN query
 ============================
 MySQL LIMIT clause:
 
 The LIMIT clause is used in the SELECT statement to constrain the number of rows to return.
 The LIMIT clause accepts one or two arguments.
 The values of both arguments must be zero or positive integers.

SELECT select_list FROM table_name LIMIT [offset,] row_count;
SELECT select_list FROM table_name LIMIT 3; //here record is returned from 1st row(offset 0 )
SELECT select_list FROM table_name LIMIT 5,4; //here 4 records are returned staring from 6th row(offset 5 )

The offset(starting index) specifies the offset of the first row to return. The offset of the first row is 0, not 1.
The row_count specifies the maximum number of rows to return.
================================================================
Why DB Testing? : To increase the robustness of data.

Types of DB testing: 
1. Structural(Schema testing using mapping sheet which contains table ,columns attributes/ like col data type,length,constrains(Nullable,PKey/FKey,any B.Rule etc) )
2. Functional (data correctness. e.g. truncation of values,-ve age,null value in mandatory fields, business rules working, ACID Prop validation)
3. Non-functional(Performance:load,stress,volume, Security: storing encrypted data)


Functional testing:
Insert: Verify values inserted from UI/API is inserted in respective DB fields (use select query and compare with data inserted)
Update:Verify values updated from UI/API is updated in respective DB fields (use select query and compare with data updated)
Delete:Verify deleted record from UI/API is also deleted from DB(use select query )

alternate scenarios:
verfiy insert/delete/update directly done in DB are reflected in UI/API as well

ACID Properties (DB Transaction properties):

A transaction in a database system must maintain Atomicity, Consistency, Isolation, and Durability
− commonly known as ACID properties − in order to ensure accuracy, completeness, and data integrity.

Atomicity: txn property all or nothing
Consistency: one coststent state to another
Isolation: one txn should not affect other
Durability: changes done should be permanent
==========================================================================================
