==	equal to (Relaxed equal)
===	equal value and equal type (Strict equal )

JavaScript Data Types
JavaScript variables can hold many data types: numbers, strings, boolean, objects (array, objects, null) ,undefined and more:

var length = 16;                               // Number
var lastName = "Johnson";                      // String
var x = (5 == 6);				//Boolean
var cars = ["Saab", "Volvo", "BMW"];  		//Array(type=object)
var x = {firstName:"John", lastName:"Doe"};    // Object
var y =null // null
var z // undefined


JavaScript Types are Dynamic
JavaScript has dynamic types. This means that the same variable can be used to hold different data types:
var x;           // Now x is undefined
x = 5;           // Now x is a Number
x = "John";      // Now x is a String


Strings Can be Objects
Normally, JavaScript strings are primitive values, created from literals:
var firstName = "John";
But strings can also be defined as objects with the keyword new:
var firstName = new String("John");
var x = "John";
var y = new String("John");

// typeof x will return string
// typeof y will return object
// (x == y) is true because x and y have equal values
// (x === y) is false because x and y have different types (string and object)


Difference Between Undefined and Null
undefined and null are equal in value but different in type:
typeof undefined           // undefined
typeof null                // object

null === undefined         // false
null == undefined          // true


====
Difference Between Undefined and Null
undefined and null are equal in value but different in type:
typeof undefined           // undefined
typeof null                // object

null === undefined         // false
null == undefined          // true

==========

var person = {
  firstName: "John",
  lastName : "Doe",
  id       : 5566,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};
objectName.propertyName   or
objectName["propertyName"]

name = person.fullName();

------
Do Not Declare Strings, Numbers, and Booleans as Objects!
When a JavaScript variable is declared with the keyword "new", the variable is created as an object:
var x = new String();        // Declares x as a String object
var y = new Number();        // Declares y as a Number object
var z = new Boolean();       // Declares z as a Boolean object
Avoid String, Number, and Boolean objects. They complicate your code and slow down execution speed.


